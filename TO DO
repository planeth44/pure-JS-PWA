--- 2022-10-16 ---
- [ ] add manifest for installability
--- 20022-11-14 ---

~ UI
- [ ] debug style for error span
- [-] Failed page
  - [ ] preview image ??
- [ ] filter list for invalid_data status (comming from index when there is a Thing w/ invalid data)
- [ ] list should give failed upload for docs

~ BEHAVIOR
- [ ] transmitFiles as Promise.all(fetch POST) {{SYNC w/ Background-fetch}} {1}
- [ ] Only edit page
  => no invalidate state on create
  => Content is either in edit mode or in show mode
  => How do we toggle btw the 2 modes
  => switch input ? longtap ? 
  => Trello 
  -> tap on field
  -> field turn into input
  -> tap on [done checkmark] at the top when finished / or [X] to cancel
:CONSIDER:
- [ ] we cannot store image directly in cache and upload from there. Formadata only accept File (needs binary)
- [ ] implement images caching after upload/sync to distant server
  - see syncController@cachePhoto
  - URL could be in the form of images/<parentUuid>/<uuid>
:LATER:CONSIDER:
- [ ] Web Notification when background-sync fail the 3 tries 
  ->  as the app may be in background
  -> service-worker:96
:CONSIDER:
- [ ] Move transmitFile to fileController and implement XMLHttpREquest to show progress
~ DESIGN
:NEXT:
- [-] Syncing / update of theModel [1/5]
  - [X] add a version in theModel
  - [ ] call to sync should send uuid + version 
  - [ ] response to sync should send diff on LastModifiedTimestamp+version
  - [ ] call update on response
  - [ ] modelController should set syncStatus=update when necessary
  - [ ] Stub on server ??
:EXPLORE:CONSIDER:
- [ ] make a Model class with method getFromPath, setFRomPath, toFormData 
:LATER:NEED_MORE_USE_CASE:
- [ ] HomeController 
=> Rethink update Templates + events ?

~ REFACTOR
:LATER:CONSIDER:
- [ ] refactor fetch [[https://code.larlet.fr/javascript-fetch/#verifier-la-nature-de-la-reponse-derreur-dune-api]] and further
- [ ] refactor syncController. Extract call to fetch to its own method
   Catch a 401 [[https://github.com/github/fetch/issues/201#issuecomment-308213104]]
   [[https://web.dev/fetch-api-error-handling/]]
   [[https://scribe.rip/trabe/fetch-api-errors-and-the-principle-of-least-surprise-66bbba3e4cc2]]

~ ABOUT TOASTER
[[https://www.clever-cloud.com/doc/clever-components/?path=/story/%F0%9F%93%8C-docs-architecture-decision-records-adr-0018-how-to-give-feedback-after-a-user-action--page]]

* SYNC w/ Background-fetch {1}
~ pseudo-code
docUuids = db.getAllKeysFromIndex('document', <pending>)
:CONSIDER:
Filter first for already uploaded
- [ ] check if file has been uploaded before trying again
  - [ ] Compare file date w/ lastSyncTimestamp
  - [ ] request HEAD for file & check response 200 +content-length
    `curl --HEAD https://f003.backblazeb2.com/file/navjournal/snark/7aeaaf55-9d3f-45da-b1d9-669e32c57b3b.jp`
then post only the filtered uuids

[[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all]]
promise.all(
  filteredDocUuids.map((uuid) => {
    return db.get('document', 'uuid').then((doc) => {
      return fetch(<url>, <options>).then((response) => {
        -> See postfile@then
        -> should return a response.json()
      })
    })
  })
)
.then((values) => {
  
})
.catch((error) => {

})



~ DONE
class HTMLfetchError extends Error {}
class unknownfetchError extends Error {}

