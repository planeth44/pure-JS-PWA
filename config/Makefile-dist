#
# Makefile
# Les Polypodes, 2014
# Licence: MIT
# Source: https://github.com/polypodes/Build-and-Deploy/blob/master/build/Makefile

# To enable this quality-related tasks, add these dependencies to your composer.json:
# they'll be available in the ./bin dir :
#
#    "require-dev": {
#      (...)
#        "phpunit/phpunit":             "~3.7",
#        "squizlabs/php_codesniffer":   "2.0.x-dev",
#        "sebastian/phpcpd":            "*",
#        "phploc/phploc" :              "*",
#        "phpmd/phpmd" :                "2.0.*",
#        "pdepend/pdepend" :            "2.0.*",
#        "fabpot/php-cs-fixer":         "@stable"
#    },


# Usage:

# me@myserver$~: make help
# me@myserver$~: make install
# me@myserver$~: make reinstall
# me@myserver$~: make update
# me@myserver$~: make tests
# me@myserver$~: make quality
# etc.

############################################################################
# Vars

# some lines may be useless for now, but these are nice tricks:

# Retrieve db connection params, triming white spaces

# Linux user & group
WWWUSER     := lereacteur
WWWGROUP    := lereacteur

PWD         := $(shell pwd)
RELEASES    := $(PWD)/releases
CURRENT     := $(PWD)/current
PUBLIC      := $(CURRENT)/public
VENDOR_PATH := $(PWD)/vendor
BIN_PATH    := $(PWD)/vendor/bin
OLD         := $(PWD)/old
NOW         := $(shell date +%Y-%m-%d--%H-%M-%S)
NEW         := $(RELEASES)/NEW
REPO        := "../../repo/pureJsPWA.git"
BRANCH      := 'master'
# Colors
YELLOW      := $(shell tput bold ; tput setaf 3)
GREEN       := $(shell tput bold ; tput setaf 2)
RESETC      := $(shell tput sgr0)

# Custom MAKE options
ifndef VERBOSE
	MAKEFLAGS += --no-print-directory
endif

############################################################################
# Generic sf2 tasks:
vendor/autoload.php:
	@composer install --no-dev --optimize-autoloader
	#   sail.navjournal.eu
	#   export PHP_VERSION=8.1.0
	#   export PHPRC=~/admin/config/php/php-746038.ini

help:
	@echo
	@echo "${GREEN}Usual tasks:${RESETC}"
	@echo
	@echo " * (clone) create the initial release:   ${YELLOW}make init${RESETC}"
	@echo " * (clone) add a new, up-to-date release:  ${YELLOW}make release${RESETC}"
	@echo " * (pull) update the current release:    ${YELLOW}make update${RESETC}"
	
	@echo "${GREEN}Other specific tasks:${RESETC}\n"
	@echo "\tTo check code quality:\tmake quality"
	@echo "\tTo fix code style:\tmake cs-fix"
	@echo "\tTo clear all caches:\tmake clear"
	@echo "\tTo run tests:\t\tmake tests (will erase all your datas)\n"

clear:
	@echo
	@echo "Resetting caches..."
	@./bin/console cache:clear --env=prod --no-debug
	@./bin/console cache:clear --env=dev

sniff:
	@./vendor/bin/phpcs --standard=PSR2 ./src -n --colors

dry-fix:
	@./vendor/bin/php-cs-fixer fix ./src --dry-run -vv

cs-fix:
	@./vendor/bin/phpcbf --standard=PSR2 ./src
	@./vendor/bin/php-cs-fixer fix ./src -vv

sniff-p:
	@./vendor/bin/phpcs --standard=PSR2 ./public/assets/js ./public/service-worker-index.js ./public/service-worker-journal.js -n --colors

cs-fix-p:
	@./vendor/bin/phpcbf --standard=PSR2 --exclude=Generic.ControlStructures.InlineControlStructure ./public/assets/js ./public/service-worker-index.js ./public/service-worker-journal.js

#quality must remain quiet, as far as it's used in a pre-commit hook validation
quality-p: sniff-p

quality: sniff dry-fix
	all: check help

############################################################################
# Specific tasks:


check: vendor/autoload.php
	@test -d $(RELEASES) || mkdir -p $(RELEASES)

permissions:
	@chmod -R 775 $(CURRENT)
	@chown -R $(WWWUSER):$(WWWGROUP) $(CURRENT)

robot:
	@echo "User-agent: *" > $(WEB_PATH)/robots.txt
	@echo "Disallow: " >> $(WEB_PATH)/robots.txt

unrobot:
	@echo "User-agent: *" > $(PUBLIC)/robots.txt
	@echo "Disallow: /" >> $(PUBLIC)/robots.txt

create:
	@echo "Creating the very first release"
	@mv $(NEW) $(RELEASES)/$(NOW)
	@ln -s $(RELEASES)/$(NOW) $(CURRENT)

switch:
	@echo "Switching actual 'current' & 'old' symlinks using the new release..."
	@rm -f $(OLD);
	@mv $(CURRENT) $(OLD);
	@mv $(NEW) $(RELEASES)/$(NOW)
	@ln -s $(RELEASES)/$(NOW) $(CURRENT)

rollback:
	@mv $(CURRENT) rollbacked
	@mv $(OLD) $(CURRENT)

clone:
	@git clone -b $(BRANCH) $(REPO) $(NEW)
	@cd $(NEW) && git config core.filemode false && cd $(PWD)

done:
	@echo
	@ls -la
	@echo "${GREEN}Done.${RESETC}"
	@echo

############################################################################
# Usual tasks:

init: check
	@echo "Git-cloning sources using ${GREEN}$(BRANCH)${RESETC} branch..."
	@$(MAKE) clone
	@$(MAKE) create
	@$(MAKE) done

# release: check mysqldump
release: check
	@echo "Git-cloning sources using ${GREEN}$(BRANCH)${RESETC} branch..."
	@$(MAKE) clone
	@$(MAKE) switch
	@$(MAKE) done

# update: check mysqldump
update: check
	@echo "Git-pulling sources using $(BRANCH) branch..."
	@cd $(CURRENT) && git pull origin $(BRANCH) && cd $(PWD)
	@$(MAKE) done


.PHONY: all check permissions switch rollback patches done vendor 
.PHONY: help init clone release update robot unrobot mysqldump mysqlinfo loaddata
# vim:ft=make
#
